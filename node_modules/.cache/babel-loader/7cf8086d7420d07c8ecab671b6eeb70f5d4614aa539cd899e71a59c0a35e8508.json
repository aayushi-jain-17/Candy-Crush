{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\Downloads\\\\candy-crush-reactjs-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport ScoreBoard from './components/ScoreBoard';\nimport blueCandy from './images/blue-candy.png';\nimport greenCandy from './images/green-candy.png';\nimport orangeCandy from './images/orange-candy.png';\nimport purpleCandy from './images/purple-candy.png';\nimport redCandy from './images/red-candy.png';\nimport yellowCandy from './images/yellow-candy.png';\nimport blank from './images/blank.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\nconst App = () => {\n  _s();\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 4);\n        columnOfFour.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n      if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 4);\n        rowOfFour.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 3);\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n      if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 3);\n        rowOfThree.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n      if (currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        currentColorArrangement[i] = blank;\n      }\n    }\n  };\n  const dragStart = e => {\n    setSquareBeingDragged(e.target);\n  };\n  const dragDrop = e => {\n    setSquareBeingReplaced(e.target);\n  };\n  const dragEnd = () => {\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\n    currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\n    const validMoves = [squareBeingDraggedId - 1, squareBeingDraggedId - width, squareBeingDraggedId + 1, squareBeingDraggedId + width];\n    const validMove = validMoves.includes(squareBeingReplacedId);\n    const isAColumnOfFour = checkForColumnOfFour();\n    const isARowOfFour = checkForRowOfFour();\n    const isAColumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n    if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\n      setSquareBeingDragged(null);\n      setSquareBeingReplaced(null);\n    } else {\n      currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\n      currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }\n  };\n  const createBoard = () => {\n    const randomColorArrangement = [];\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n  useEffect(() => {\n    createBoard();\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: currentColorArrangement.map((candyColor, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: candyColor,\n        alt: candyColor,\n        \"data-id\": index,\n        draggable: true,\n        onDragStart: dragStart,\n        onDragOver: e => e.preventDefault(),\n        onDragEnter: e => e.preventDefault(),\n        onDragLeave: e => e.preventDefault(),\n        onDrop: dragDrop,\n        onDragEnd: dragEnd\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      score: scoreDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"a6C/FUeBHOw5DCQEvzerpKvJb3M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ScoreBoard","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","blank","width","candyColors","App","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","decidedColor","isBlank","every","square","score","forEach","checkForRowOfFour","rowOfFour","notValid","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","firstRow","isFirstRow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMoves","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","createBoard","randomColorArrangement","randomColor","push","timer","setInterval","clearInterval","map","candyColor","index","preventDefault"],"sources":["C:/Users/Hp/Downloads/candy-crush-reactjs-main/src/App.js"],"sourcesContent":["import {useEffect, useState} from 'react'\nimport ScoreBoard from './components/ScoreBoard'\nimport blueCandy from './images/blue-candy.png'\nimport greenCandy from './images/green-candy.png'\nimport orangeCandy from './images/orange-candy.png'\nimport purpleCandy from './images/purple-candy.png'\nimport redCandy from './images/red-candy.png'\nimport yellowCandy from './images/yellow-candy.png'\nimport blank from './images/blank.png'\n\nconst width = 8\nconst candyColors = [\n    blueCandy,\n    orangeCandy,\n    purpleCandy,\n    redCandy,\n    yellowCandy,\n    greenCandy\n]\n\nconst App = () => {\n    const [currentColorArrangement, setCurrentColorArrangement] = useState([])\n    const [squareBeingDragged, setSquareBeingDragged] = useState(null)\n    const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\n    const [scoreDisplay, setScoreDisplay] = useState(0)\n\n    const checkForColumnOfFour = () => {\n        for (let i = 0; i <= 39; i++) {\n            const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\n            const decidedColor = currentColorArrangement[i]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 4)\n                columnOfFour.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const checkForRowOfFour = () => {\n        for (let i = 0; i < 64; i++) {\n            const rowOfFour = [i, i + 1, i + 2, i + 3]\n            const decidedColor = currentColorArrangement[i]\n            const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (notValid.includes(i)) continue\n\n            if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 4)\n                rowOfFour.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const checkForColumnOfThree = () => {\n        for (let i = 0; i <= 47; i++) {\n            const columnOfThree = [i, i + width, i + width * 2]\n            const decidedColor = currentColorArrangement[i]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 3)\n                columnOfThree.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const checkForRowOfThree = () => {\n        for (let i = 0; i < 64; i++) {\n            const rowOfThree = [i, i + 1, i + 2]\n            const decidedColor = currentColorArrangement[i]\n            const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (notValid.includes(i)) continue\n\n            if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 3)\n                rowOfThree.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const moveIntoSquareBelow = () => {\n        for (let i = 0; i <= 55; i++) {\n            const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n            const isFirstRow = firstRow.includes(i)\n\n            if (isFirstRow && currentColorArrangement[i] === blank) {\n                let randomNumber = Math.floor(Math.random() * candyColors.length)\n                currentColorArrangement[i] = candyColors[randomNumber]\n            }\n\n            if ((currentColorArrangement[i + width]) === blank) {\n                currentColorArrangement[i + width] = currentColorArrangement[i]\n                currentColorArrangement[i] = blank\n            }\n        }\n    }\n\n    const dragStart = (e) => {\n        setSquareBeingDragged(e.target)\n    }\n    const dragDrop = (e) => {\n        setSquareBeingReplaced(e.target)\n    }\n    const dragEnd = () => {\n        const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\n        const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n\n        currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\n        currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\n\n        const validMoves = [\n            squareBeingDraggedId - 1,\n            squareBeingDraggedId - width,\n            squareBeingDraggedId + 1,\n            squareBeingDraggedId + width\n        ]\n\n        const validMove = validMoves.includes(squareBeingReplacedId)\n\n        const isAColumnOfFour = checkForColumnOfFour()\n        const isARowOfFour = checkForRowOfFour()\n        const isAColumnOfThree = checkForColumnOfThree()\n        const isARowOfThree = checkForRowOfThree()\n\n        if (squareBeingReplacedId &&\n            validMove &&\n            (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\n            setSquareBeingDragged(null)\n            setSquareBeingReplaced(null)\n        } else {\n            currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n            currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\n            setCurrentColorArrangement([...currentColorArrangement])\n        }\n    }\n\n\n    const createBoard = () => {\n        const randomColorArrangement = []\n        for (let i = 0; i < width * width; i++) {\n            const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n            randomColorArrangement.push(randomColor)\n        }\n        setCurrentColorArrangement(randomColorArrangement)\n    }\n\n    useEffect(() => {\n        createBoard()\n    }, [])\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            checkForColumnOfFour()\n            checkForRowOfFour()\n            checkForColumnOfThree()\n            checkForRowOfThree()\n            moveIntoSquareBelow()\n            setCurrentColorArrangement([...currentColorArrangement])\n        }, 100)\n        return () => clearInterval(timer)\n    }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\n\n\n    return (\n        <div className=\"app\">\n            <div className=\"game\">\n                {currentColorArrangement.map((candyColor, index) => (\n                    <img\n                        key={index}\n                        src={candyColor}\n                        alt={candyColor}\n                        data-id={index}\n                        draggable={true}\n                        onDragStart={dragStart}\n                        onDragOver={(e) => e.preventDefault()}\n                        onDragEnter={(e) => e.preventDefault()}\n                        onDragLeave={(e) => e.preventDefault()}\n                        onDrop={dragDrop}\n                        onDragEnd={dragEnd}\n                    />\n                ))}\n            </div>\n            <ScoreBoard score={scoreDisplay}/>\n        </div>\n    )\n}\n\nexport default App\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}